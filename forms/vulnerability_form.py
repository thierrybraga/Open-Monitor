# forms/vulnerability_form.py

from flask_wtf import FlaskForm
from wtforms import (
    StringField,
    TextAreaField,
    DateField,
    DecimalField,
    SelectField,
    BooleanField,
    SubmitField
)
from wtforms.validators import (
    DataRequired,
    Length,
    Regexp,
    NumberRange,
    Optional,
    ValidationError
)
# CORREÇÃO AQUI: Use importação relativa para 'models'
from ..models.enums import severity_levels

class VulnerabilityForm(FlaskForm):
    cve_id = StringField(
        'CVE ID',
        validators=[
            DataRequired("CVE ID é obrigatório."),
            Regexp(r'^CVE-\d{4}-\d{4,}$', message="Formato deve ser CVE-YYYY-NNNN."),
            Length(max=50, message="Máximo 50 caracteres.")
        ]
    )
    description = TextAreaField(
        'Descrição',
        validators=[
            DataRequired("Descrição é obrigatória."),
            Length(max=2000, message="Máximo 2000 caracteres.")
        ]
    )
    published_date = DateField(
        'Data de Publicação',
        format='%Y-%m-%d',
        validators=[DataRequired("Data de publicação é obrigatória.")]
    )
    last_modified = DateField(
        'Última Modificação',
        format='%Y-%m-%d',
        validators=[DataRequired("Data de última modificação é obrigatória.")]
    )
    base_severity = SelectField(
        'Severidade',
        # Assumindo que severity_levels.enums é uma lista ou iterável de valores
        choices=[(lvl, lvl) for lvl in severity_levels.enums],
        validators=[DataRequired("Selecione a severidade.")]
    )
    cvss_score = DecimalField(
        'CVSS Score',
        places=1,
        rounding=None,
        validators=[
            DataRequired("CVSS Score é obrigatório."),
            NumberRange(min=0.0, max=10.0, message="Deve estar entre 0.0 e 10.0.")
        ]
    )
    patch_available = BooleanField('Patch disponível')
    assigner = StringField(
        'Assigner',
        validators=[Optional(), Length(max=255, message="Máximo 255 caracteres.")]
    )
    submit = SubmitField('Salvar')

    def validate_last_modified(self, field):
        # Validação customizada: última modificação não pode ser anterior à publicação
        if self.published_date.data and field.data and field.data < self.published_date.data:
            raise ValidationError("Última modificação deve ser igual ou posterior à data de publicação.")