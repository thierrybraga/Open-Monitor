# models/vulnerability.py

import re
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from sqlalchemy import Column, Integer, String, Text, DateTime, Float, Boolean
from sqlalchemy.orm import relationship, validates
from  ..extensions.db import db
from .base_model import BaseModel
from .enums import severity_levels

logger = logging.getLogger(__name__)

class Vulnerability(BaseModel):
    __tablename__ = 'vulnerabilities'

    id              = Column(Integer, primary_key=True)
    cve_id          = Column(String(50), unique=True, nullable=False, index=True)
    description     = Column(Text, nullable=False)
    published_date  = Column(DateTime, nullable=False, index=True)
    last_modified   = Column(DateTime, nullable=False)
    base_severity   = Column(severity_levels, nullable=False, index=True)
    cvss_score      = Column(Float, nullable=False)
    patch_available = Column(Boolean, default=False, nullable=False)
    assigner        = Column(String(255), nullable=True)

    # relacionamentos
    metrics            = relationship('CVSSMetric', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')
    vendors            = relationship('CVEVendor', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')
    products           = relationship('CVEProduct', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')
    version_references = relationship('VersionReference', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')
    weaknesses         = relationship('Weakness', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')
    references         = relationship('Reference', back_populates='vulnerability', cascade='all, delete-orphan', lazy='joined')

    @validates('cve_id')
    def validate_cve_id(self, key: str, value: str) -> str:
        if not re.match(r'^CVE-\d{4}-\d{4,}$', value):
            raise ValueError("Formato inválido: CVE-YYYY-NNNN")
        return value

    @validates('cvss_score')
    def validate_cvss_score(self, key: str, value: float) -> float:
        if not 0.0 <= value <= 10.0:
            raise ValueError("CVSS score deve estar entre 0.0 e 10.0")
        return value

    @validates('last_modified')
    def validate_dates(self, key: str, value: datetime) -> datetime:
        if self.published_date and value < self.published_date:
            raise ValueError("last_modified deve ser >= published_date")
        return value

    def to_dict(self) -> Dict[str, Any]:
        """Serialização básica para JSON."""
        return {
            'cve_id'         : self.cve_id,
            'description'    : self.description,
            'published_date' : self.published_date.isoformat(),
            'last_modified'  : self.last_modified.isoformat(),
            'base_severity'  : self.base_severity,
            'cvss_score'     : self.cvss_score,
            'patch_available': self.patch_available,
            'assigner'       : self.assigner,
        }

    def __repr__(self) -> str:
        return f"<Vulnerability {self.cve_id}>"
