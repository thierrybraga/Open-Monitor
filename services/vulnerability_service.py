
"""
VulnerabilityService handles business logic for querying and managing vulnerability data.

This service provides methods to fetch paginated vulnerabilities, dashboard counts,
and individual vulnerability details, interacting with the database via SQLAlchemy.
"""

from typing import List, Dict, Optional, Tuple
from sqlalchemy.orm import Session
from ..models.vulnerability import Vulnerability


class VulnerabilityService:
    """Service for managing vulnerability-related operations."""

    def __init__(self, session: Session):
        """
        Initialize the service with a database session.

        Args:
            session: SQLAlchemy session for database operations.
        """
        self.session = session

    def get_recent_paginated(self, page: int, per_page: int) -> Tuple[List[Vulnerability], int]:
        """
        Fetch a paginated list of recent vulnerabilities.

        Args:
            page: Page number for pagination (1-based).
            per_page: Number of items per page.

        Returns:
            Tuple containing the list of vulnerabilities and the total count.
        """
        try:
            query = self.session.query(Vulnerability).order_by(Vulnerability.published_date.desc())
            pagination = query.paginate(page=page, per_page=per_page, error_out=False)
            return pagination.items, pagination.total
        except Exception as e:
            raise RuntimeError(f"Error fetching paginated vulnerabilities: {e}")

    def get_dashboard_counts(self) -> Dict[str, int]:
        """
        Retrieve counts of vulnerabilities by severity and total.

        Returns:
            Dictionary with counts for critical, high, medium, and total vulnerabilities.
        """
        try:
            counts = {
                'critical': self.session.query(Vulnerability).filter_by(severity='critical').count(),
                'high': self.session.query(Vulnerability).filter_by(severity='high').count(),
                'medium': self.session.query(Vulnerability).filter_by(severity='medium').count(),
                'total': self.session.query(Vulnerability).count()
            }
            return counts
        except Exception as e:
            raise RuntimeError(f"Error fetching dashboard counts: {e}")

    def get_vulnerability_by_id(self, cve_id: str) -> Optional[Vulnerability]:
        """
        Fetch a single vulnerability by its CVE ID.

        Args:
            cve_id: The CVE ID of the vulnerability (e.g., 'CVE-2023-12345').

        Returns:
            The Vulnerability object if found, else None.
        """
        try:
            return self.session.query(Vulnerability).filter_by(cve_id=cve_id).first()
        except Exception as e:
            raise RuntimeError(f"Error fetching vulnerability by ID {cve_id}: {e}")